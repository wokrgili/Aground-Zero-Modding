<?xml version="1.0" encoding="utf-8" ?>
<data>
	<include id="structures/models.xml" />
	<include id="vehicles/models.xml" />
	<include id="enemies/models.xml" />

    <model id="subway" path="subway.wobj" texture="subway_D.png" normal="subway_N.png" exclude="[]" subset="var ex = eval(xml.get('exclude')); return function(mesh){return ex.indexOf(mesh) == -1;}" />
	<setSpecular normal="subway_N.png" specular="white" scale="0.7" />
	<model id="subway1" extends="subway" exclude="['track_broken','spigot','sign','fan','electricBox_B','electricBox_C','electricBox_D']" />
	<model id="subway2" extends="subway" exclude="['track_broken','spigot','sign','fan','electricBox_A','electricBox_C','electricBox_D']" />
	<model id="subway3" extends="subway" exclude="['track_broken','spigot','sign','fan','electricBox_B','electricBox_A','electricBox_D']" />
	<model id="subway4" extends="subway" exclude="['track_broken','fan','electricBox_D','electricBox_B','electricBox_C','electricBox_A']" />
	<model id="subway5" extends="subway" exclude="['track','fan','spigot','sign','electricBox_A','electricBox_B','electricBox_C']" />
	<model id="subway6" extends="subway" exclude="['track_broken','spigot','sign','electricBox_A','electricBox_B','electricBox_C','electricBox_D']" />
	<model id="subway7" extends="subway" exclude="['track','fan','sign','electricBox_A','electricBox_B','electricBox_C','electricBox_D']" />
	<model id="subway8" extends="subway" exclude="['track_broken','spigot','fan','sign','electricBox_A','electricBox_B','electricBox_C','electricBox_D']" />

	<model id="subway_ad" primitive="dbl_quad" texture="ads.png" normal="no_specular"><texture x='1' y='1' width="500" height="286" /></model>

	<model id="rock" path="rock.wobj" texture="rock_D.png" normal="rock_N.png" />
	<setSpecular normal="rock_N.png" specular="white" scale="0.3" />
	<recipe id="debris3" cost="30" time="6"><requires id="iron" count="3" /></recipe>
	<particles id="reentry" extends="break" type="emissive" color="0xff8844" color_decay="0x008844" color_decay_scale="-0.15" alpha="2" colorScale="2" up="true" size="0.003" offsetZ="-1.3" width="0.7" height="0.7" depth="0.1" speed="-0.02" power="7" spawnCount="1000" linkRotation="false" />
	<particles id="rock_explode" extends="break" colorScale="3" type="emissive" spawnCount="60" speed="0.2" size="0.015625" />
	<structure id="rock" extends="debris" model="rock" recipe="debris3" ground="" aoe="5" attack="40">
		<infoInit>this.params.attack = eval(this.xml.get("attack")); this.params.aoe = eval(this.xml.get("aoe")); this.rotationFactor.init(1,1,1);</infoInit>
		<shape type="box" x="-0.1" width="1.75" height="1.5" depth="0.5" />
		<shape type="sphere" x="0.2" z="0.2" radius="0.7"  />
        <transform>matrix.setScale(0.001,0.001,0.001);</transform>
		<init><script>
		function canDamage(o){
			return (o.info.self&amp;(PLAYER|NPC|ENEMY|STRUCTURE|BLUEPRINT)) != 0 &amp;&amp; o.health.get() > 0 &amp;&amp; getItemValue(o,"defense") &lt; this.info.params.attack;
		}
		function canHitShape(s){return (s._collisionMask&amp;PROJECTILE) != 0;}
		function explode(){
			this.removeParticlesById("reentry");
			if(this.area == null) return; var aoe = this.info.params.aoe, atk = this.info.params.attack, pt = new Point(this.getX(), this.getY(), this.getZ());
			var p = this.getPosition(); this.area.addParticles("rock_explode", p.x, p.y, p.z); playSoundAt(this.area, p, "landslide", false, 3, 2);
			for(o in this.area.getObjects(canDamage, makeBounds(this.getX()-aoe,this.getY()-aoe,this.getZ()-aoe,aoe*2,aoe*2,aoe*2), 0, canHitShape)){
				var aabb = o.getAABB(), dx = Utils.clamp(this.getX(), aabb.min_x, aabb.max_x)-this.getX(), dy = Utils.clamp(this.getY(), aabb.min_y, aabb.max_y)-this.getY();
				var dz = Utils.clamp(this.getZ(), aabb.min_z, aabb.max_z)-this.getZ(), len = Math.sqrt(dx*dx+dy*dy+dz*dz);
				if(len &lt; aoe) attack(o, this, Utils.interp(atk, 0, Math.max(0, (len-1)/aoe)), pt, null, null);
			} this.storage.get('burn').delete();
			for(g in game_screens) if(g.getArea() == this.area){
				var dx = g.camera.x-this.getX(), dy = g.camera.y-this.getY(), dz = g.camera.z-this.getZ(), len = Math.sqrt(dx*dx+dy*dy+dz*dz);
				if(len &lt; 40) container.shake(5,0.4/Math.max(1,len),30);
			} if(this.area.countById('rock') > 20) this.remove();
			else {this.body._linearDamping = 10; this.body._angularDamping = 1;}
		}
		function setCollisionMask(m){
			var s = this.body._shapeList; while(s != null){s._collisionMask = m; s = s._next;}
		}
		</script></init>
		<addedToArea><script if="this.storage.get('burn').getBool() == true">
		this.setRotation(PI*random(), PI*random(), PI*random()); this.body.addAngularVelocity(vec3(10,10,10)); this.addParticles("reentry");
		collision_mask = this.getZ() > 116?0:this.info.block; setCollisionMask(collision_mask);
		this.body._linearDamping = 3; this.body._angularDamping = 0.1;
		</script></addedToArea>
		<beginContact>if(this.storage.get('burn').getBool() == true) explode();</beginContact>
		<beginWorldContact>if(this.storage.get('burn').getBool() == true) explode();</beginWorldContact>
		<onFrame>
		if(this.storage.get('burn').getBool() == true){
			var m = this.getZ() > 116?0:this.info.block; if(m != collision_mask){collision_mask = m; setCollisionMask(collision_mask);}
			if(this.area.hasWater(Math.floor(this.getX()),Math.floor(this.getY()),Math.floor(this.getZ()))) explode();
		}
		</onFrame>
	</structure>

	<model id="seaweed" path="seaweed.wobj" texture="seaweed.png" normal="no_specular" />
	<item id="seaweed" model="build" tile="seaweed" action="place_object" place="seaweed" type="material" scale="1" cost="10" consume="true" allowRotate="false" />
	<script>PASSTHROUGH = 2048</script>
	<structure id="seaweed" self="PASSTHROUGH" block="WORLD|PASSTHROUGH" model="seaweed" ground="shadow" static="true" modelBottom="true" defense="999" access="alternate">
		<infoInit>
		this.params.defense = eval(this.xml.get("defense")); this.params.name = "items."+this.id;
		</infoInit>
		<shape type="cylinder" radius="0.5" height="3" />
		<groundBounds x="-0.067" y="-0.067" width="0.133" height="0.133" />
		<transform>matrix.setScale(0.5,0.5,0.5);</transform>
		<init><script>this.models[0].setAnimation("loop", true); var d = this.storage.get('scale'), s = d.getFloat(); if(s == null){
			s = 0.8+random()*0.4; d.setFloat(s); this.setRotation(0,0,random()*Math.PI*2);
		} this.modelTransform.set(0, 0, this.modelTransform.get(0,0)*s);
		this.modelTransform.set(1, 1, this.modelTransform.get(1,1)*s); this.modelTransform.set(2, 2, this.modelTransform.get(2,2)*s);
		</script></init>
		<getSelection>selection.bounds.copy(this.info.aabb); selection.setTooltips(null, getText("actions.remove_item{item:"+this.info.id+"}")); return true;</getSelection>
		<onAlternate>
			<sound id="place_metal" source="object" /><script>
			area.addParticles("break", this.getX(), this.getY(), this.getZ());
			spawnItem("seaweed", area, Math.floor(this.getX()), Math.floor(this.getY()), Math.floor(this.getZ())); this.remove();
			</script><break />
		</onAlternate>
	</structure>
</data>